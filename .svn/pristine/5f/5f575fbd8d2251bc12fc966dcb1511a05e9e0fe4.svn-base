package control;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.ejb.EJB;
import javax.ejb.Singleton;
import javax.ejb.Startup;

import entity.Event;
import entity.NotCreatorException;
import entity.NotificationType;
import entity.User;

@Singleton
public class Rescheduler {

	@EJB
	NotificationManager nm;
	@EJB
	UserManager um;
	@EJB
	EventManager em;
	@EJB
	WeatherManager wm;
	@EJB
	InvitationManager im;

	public ArrayList<String> checkForBadWeather(User currentUser) {

		ArrayList<String> eventTitles = new ArrayList<String>();
		Calendar calendar = new GregorianCalendar();
		// obtains the corresponding date for today
		Date today = calendar.getTime();
		// obtains the time in millis that corresponds to tomorrow
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		Date tomorrow = calendar.getTime();
		// obtains the time in millis that corresponds to three days after
		calendar.add(Calendar.DAY_OF_MONTH, 2);
		Date threeDays = calendar.getTime();

		Date eventDate;
		String eventLocation;
		String weatherData;
		// for every event created
		for (Event e : em.loadOutdoorEventsByUser(currentUser, threeDays)) {
			// stores the information about date,location and weather of the
			// date
			eventDate = e.getStartDate();
			eventLocation = e.getLocation();
			weatherData = wm.getWeatherData(eventLocation, eventDate);
			// if tomorrow there is an event with bad weather conditions
			if (e.getBadWeatherCondition().equals(weatherData)
					&& tomorrow.getYear() == eventDate.getYear()
					&& tomorrow.getMonth() == eventDate.getMonth()
					&& tomorrow.getDay() == eventDate.getDay())
				eventTitles.add(e.getTitle());

			// checks also for bad weather condition of three days after and
			// events that were not been rescheduled
			else if (e.getBadWeatherCondition().equals(weatherData)
					&& threeDays.getYear() == eventDate.getYear()
					&& threeDays.getMonth() == eventDate.getMonth()
					&& threeDays.getDay() == eventDate.getDay()
					&& !e.isRescheduled()) {
				//now checks
				calendar.setTime(today);
				// looks for a suitable day until 10 days
				for (int i = 0; i <= 3; i++) {
					calendar.add(Calendar.DAY_OF_MONTH, i);
					if (!e.getBadWeatherCondition().equals(
							"Clear")) {
						// create a notification with the suggested date
						nm.createNotification(currentUser, e,
								NotificationType.BAD_WEATHER_CONDITION,
								calendar.getTime().toString());
						e.setRescheduled(true);
						try {
							em.updateEvent(e);
						} catch (NotCreatorException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						break;
					}
				}

			}
		}

		// for every event to which the user has been invited checks a bad
		// weather collision
		for (Event e : im.loadInvitedOutdoorEventsByUser(currentUser,threeDays)) {
			eventDate = e.getStartDate();
			// if tomorrow there is an event with bad weather conditions
			if (e.getBadWeatherCondition().equals("Cloud")
					&& tomorrow.getYear() == eventDate.getYear()
					&& tomorrow.getMonth() == eventDate.getMonth()
					&& tomorrow.getDay() == eventDate.getDay())
				eventTitles.add(e.getTitle());
		}

		return eventTitles;
	}

}
