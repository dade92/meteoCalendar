package control;


import java.io.Serializable;
import java.security.Principal;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

import entity.Event;
import entity.User;


@Stateless
public class EventManager implements Serializable {
	
	private static final long serialVersionUID = 1L;

		@PersistenceContext(unitName = "meteoCalPU")
	    private EntityManager em;

	 	@EJB
	 	private UserManager um;
	    
	    public void create(Event entity) {
	    	entity.setOrganizerUser(um.getLoggedUser());
	        em.persist(entity);
	    }

	    public void edit(Event entity) {
	        em.merge(entity);
	    }

	    public void remove(Event entity) {
	        em.remove(em.merge(entity));
	    }

	    public Event find(Object id) {
	        return em.find(Event.class, id);
	    }

	    public List<Event> findAll() {
	    	TypedQuery<Event> tq=(TypedQuery<Event>) em.createQuery(
	        		"SELECT e FROM Event e WHERE  e.organizerUser=:user")
	        		.setParameter("user", um.getLoggedUser());
	        return tq.getResultList();
	    }
	    
	    public List<Event> findAll2(){
	        TypedQuery<Event> query = em.createNamedQuery(Event.findAll, Event.class);
	        return query.getResultList();
	    }

	    public int count() {
	        javax.persistence.criteria.CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
	        javax.persistence.criteria.Root<Event> rt = cq.from(Event.class);
	        cq.select(em.getCriteriaBuilder().count(rt));
	        javax.persistence.Query q = em.createQuery(cq);
	        return ((Long) q.getSingleResult()).intValue();
	    }
	    
	    public int count2() {
	        Query query = em.createNamedQuery(Event.count);
	        return ((Number)query.getSingleResult()).intValue();
	    }
  //  @PersistenceContext
	    //EntityManager em;
	    //  @Inject
	    // Principal principal;

    /**
     * creates a new event
     * @param event the event
     */
	    // public void createEvent(Event event) {
	    //     em.persist(event);
	    // }
    
    /**
     * loads the event by his date
     * @param date date of the event
     * @return the event
     */
// public Event loadEventByDate(String date) {
// 	return null;
	    //  }
    
    /**
     * loads the event by id
     * @param id event's id
     * @return event
     */
	    //  public Event loadEventById(int id) {
	    //  	return null;
	    //  }
    
    /**
     * loads the events created 
     * by another user if visible
     * @param username username
     * @return the events
     */
	    //  public Event loadEventIfVisible(String username) {
	    // 	return null;
	    //  }
    
    /**
     * loads the event by his creator
     * @param username creator's username
     * @return the events created
     */
	    //  public Event loadEventByCreator(String username) {
	    //  	return em.find(Event.class, principal.getName());
	    //   }
 
}
