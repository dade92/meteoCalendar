package bean;

import java.util.Date;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.LazyScheduleModel;
import org.primefaces.model.ScheduleEvent;
import org.primefaces.model.ScheduleModel;

import control.EventManager;
import control.InvitationManager;
import entity.Event;
import entity.User;

@ManagedBean
@ViewScoped
public class OtherUserScheduleView {
	
	private static final long serialVersionUID = 1L;
	
	private ScheduleModel lazyEventModel;

	private  ScheduleEvent event = new DefaultScheduleEvent();
	
	@EJB
	private EventManager em;
	@EJB
	private InvitationManager im;
	
	@ManagedProperty("#{SearchUsersCheckboxView}") SearchUsersCheckboxView cbw;
	
	@PostConstruct
	public void init() {
		
		final User searchedUser=cbw.getSelectedUser();
		
		lazyEventModel = new LazyScheduleModel() {
            
            @Override
            public void loadEvents(Date start, Date end) {
            	for(Event e:em.loadEventsByUser(searchedUser)) {
            		//se l'evento è pubblico, lo visualizzo
            		if(e.getVisibility().equals("public"))
            			addEvent(new DefaultScheduleEvent(e.getTitle(),e.getStartDate(),e.getEndDate(),e.getId()));
            		//altrimenti se è privato, faccio vedere la casella senza visualizzarlo
            		else if(e.getVisibility().equals("private"))
            			addEvent(new DefaultScheduleEvent());
        		}
        		for(Event e:im.loadInvitedEventsByUser(searchedUser)) {
        			if(e.getVisibility().equals("public"))
        				addEvent(new DefaultScheduleEvent(e.getTitle(),e.getStartDate(),e.getEndDate()));
        			else if(e.getVisibility().equals("private"))
        				addEvent(new DefaultScheduleEvent());
        		}
            }   
        };

	}
	
}
