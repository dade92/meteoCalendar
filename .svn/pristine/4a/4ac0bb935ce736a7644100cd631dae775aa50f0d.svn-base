package bean;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.AjaxBehaviorEvent;






import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.LazyScheduleModel;
import org.primefaces.model.ScheduleEvent;
import org.primefaces.model.ScheduleModel;

import control.EventManager;
import control.InvitationManager;
import control.Rescheduler;
import control.UserManager;
import entity.Event;
import entity.NotCreatorException;
import entity.User;

@ManagedBean
@ViewScoped
public class ScheduleView implements Serializable  {

	
	private static final long serialVersionUID = 1L;
	
	private ScheduleModel lazyEventModel;
	
	private String isCreator;

	private  ScheduleEvent event = new DefaultScheduleEvent();
	
	private Event calendarEvent=new Event();
	
	@EJB EventManager em;
	@EJB InvitationManager im;
	@EJB UserManager um;
	@EJB Rescheduler rescheduler;
	

	@PostConstruct
	public void init() {
		
		lazyEventModel = new LazyScheduleModel() {

			private static final long serialVersionUID = 1L;

			@Override
            public void loadEvents(Date start, Date end) {
            	for(Event e:em.loadCreatedEvents()) {
        			addEvent(new DefaultScheduleEvent(e.getTitle(),e.getStartDate(),e.getEndDate(),e.getId()));
        		}
        		for(Event e:im.loadInvitedEvents()) {
        			addEvent(new DefaultScheduleEvent(e.getTitle(),e.getStartDate(),e.getEndDate(),e.getId()));
        		}
            }   
        };
        //looks for bad weather collisions at the beginning
        this.checkForNotifications();

	}
	
	public void deleteEvent() {
		try {
			em.remove(calendarEvent);
			this.addMessage("Hey", "Event removed");
		} catch (NotCreatorException e) {
			this.addMessage("Error", "you're not the creator");
		}
	}
		
	public void updateEvent() {
		//calls the method of the manager on the calendarEvent
		System.out.println("update called!!");
		try {
			em.updateEvent(calendarEvent);
			this.addMessage("Hey", "Event updated successfully!");
		} catch (Exception e) {
			this.addMessage("Error", "you're not the creator");
		}
	}
	    
	private void checkForNotifications() {
		List<String>answer;
		//get the list of events that must be shown to the user (notification)
		answer=rescheduler.checkForBadWeather(um.getLoggedUser());
		for(String title:answer)
			this.addMessage("Warning", "the event "+title+"bad weather for tomorrow!");
		
	}
    public ScheduleModel getLazyEventModel() {
        return lazyEventModel;
    }
     
    public ScheduleEvent getEvent() {
        return event;
    }
 
    public void setEvent(ScheduleEvent event) {
        this.event = event;
    }
    
    public void setCalendarEvent(Event e) {
    	this.calendarEvent=e;
    }
    
    public Event getCalendarEvent() {
    	return calendarEvent;
    }
     
    public void addEvent(ActionEvent actionEvent) {
        if(event.getId() == null)
            lazyEventModel.addEvent(event);
        else
        	lazyEventModel.updateEvent(event);
         
        event = new DefaultScheduleEvent();
    }
     
    public void onEventSelect(SelectEvent selectEvent) {
        event = (ScheduleEvent) selectEvent.getObject();
        calendarEvent=em.find((int)event.getData());
        if(calendarEvent.getOrganizerUser().getId()==um.getLoggedUser().getId())
        	this.setIsCreator("true");
        else
        	this.setIsCreator("false");
    }
    
    public List<User> getNotifications() {
    	return em.loadNotifiedUsers(calendarEvent);
    }
    
    public List<User> getInvitations() {
    	return im.loadInvitedUsers(calendarEvent);
    }
     
     
    private void addMessage(String details,String msg) {
    	FacesMessage message = new FacesMessage(details,msg);	
        FacesContext.getCurrentInstance().addMessage(um.getLoggedUser().getUsername(), message);
    }

	public String getIsCreator() {
		return isCreator;
	}

	public void setIsCreator(String isCreator) {
		this.isCreator = isCreator;
	}
	
	public User getUser() {
		return um.getLoggedUser();
	}
	
	public void onVisibilityChange(AjaxBehaviorEvent selectEvent) {
		User currentUser=um.getLoggedUser();
		if(currentUser.isVisible())
			currentUser.setVisible(false);
		else
			currentUser.setVisible(true);
		um.updateUser(currentUser);
		this.addMessage("", "Calendar visibility changed!");
	}
}